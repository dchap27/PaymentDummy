apply plugin: 'com.android.application'
apply plugin: 'signing'

def keystorePropertiesFile = rootProject.file("keystore.properties")

// Initialize a new Properties() object called keystoreProperties.
def keystoreProperties = new Properties()

// Load your keystore.properties file into the keystoreProperties object.
keystoreProperties.load(new FileInputStream(keystorePropertiesFile))

// create versioning formula
ext {
    versionMajor = 1
    versionMinor = 1
    versionPatch = 5
    screenSize = 0
    minimumSdkVersion = 18
    versionClassifier = null
    isSnapShot = true
}

android {
    signingConfigs {
        paymentRelease {
            storeFile file(keystoreProperties['storeFile'])
            storePassword keystoreProperties['storePassword']
            keyAlias keystoreProperties['keyAlias']
            keyPassword keystoreProperties['keyPassword']
        }
    }
    compileSdkVersion 25
    buildToolsVersion "28.0.3"
    defaultConfig {
        applicationId "ng.com.dayma.paymentdummy"
        minSdkVersion minimumSdkVersion
        targetSdkVersion 25
        versionCode generateVersionCode()
        versionName generateVersionName()
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }
    buildTypes {
        release {
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.paymentRelease
        }
        debug {
            minifyEnabled false
            applicationIdSuffix ".debug"
        }
    }
    flavorDimensions "version"

    productFlavors {
        regular {
            dimension "version"
            applicationIdSuffix ".regular"
            resValue "string", "content_provider", applicationId + ".provider"

        }
        advanced {
            dimension "version"
            applicationIdSuffix ".advanced"
            resValue "string", "content_provider", applicationId + ".provider"
        }
    }
}

private Integer generateVersionCode(){
    return minimumSdkVersion * 10000000 + versionMajor * 10000 + versionMinor * 100 + versionPatch
}

private String generateVersionName(){
    String version_Name = "${versionMajor}.${versionMinor}.${versionPatch}"
    if(versionClassifier == null & isSnapShot){
        versionClassifier = "SNAPSHOT"
    }
    if(versionClassifier != null){
        version_Name += "-" + versionClassifier
    }
    return version_Name
}

dependencies {
    def lifecycle_version = "1.1.1"
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    androidTestImplementation('com.android.support.test.espresso:espresso-core:2.2.2', {
        exclude group: 'com.android.support', module: 'support-annotations'
    })
    implementation 'com.android.support:appcompat-v7:25.3.1'
    implementation 'com.android.support.constraint:constraint-layout:1.0.2'
    implementation 'com.android.support:design:25.3.1'
    implementation 'com.android.support:cardview-v7:25.3.1'
    implementation 'com.android.support:support-v4:25.3.1'
    // ViewModel and LiveData
    implementation "android.arch.lifecycle:extensions:$lifecycle_version"

    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'com.android.support.test.espresso:espresso-contrib:2.2.2'
    androidTestImplementation 'com.android.support:appcompat-v7:25.3.1'
    androidTestImplementation 'com.android.support:design:25.3.1'
    androidTestImplementation 'com.android.support:cardview-v7:25.3.1'

}
configurations.all {
    resolutionStrategy.eachDependency { DependencyResolveDetails details ->
        def requested = details.requested
        if (requested.group == 'com.android.support') {
            // Skip multidex because it follows a different versioning pattern.
            if (!requested.name.startsWith("multidex")) {
                details.useVersion '25.3.1'
            }
        }
    }
}